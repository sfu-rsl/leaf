[package]
name = "libafl_libfuzzer"
version = "0.15.2"
description = "libFuzzer shim which uses LibAFL with common defaults"
repository = "https://github.com/AFLplusplus/LibAFL/"
readme = "../README.md"
license = "MIT OR Apache-2.0"
keywords = ["fuzzing", "testing", "security"]
edition = "2024"
rust-version = "1.85"
categories = ["development-tools::testing"]

include = [
  "/src",
  "/Cargo.toml",
  "/build.rs",
  "/runtime",
  "LICENSE-MIT",
  "LICENSE-APACHE",
]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[build-dependencies]
cc = "1.0.106"
rustversion = "1.0.17"
toml = { version = "0.8.19", features = ["preserve_order"] }

[features]
default = ["fork"]
document-features = ["dep:document-features"]

#! ## Feature Flags

## Enables the derive macros for the arbitrary dependency, transparently forwarded from libfuzzer-sys
arbitrary-derive = ["libfuzzer-sys/arbitrary-derive"]

## Enables forking in the fuzzer runtime for restarting managers for Unix systems (on by default)
fork = []

## Embeds the built libafl_libfuzzer_runtime library into the crate with include_bytes! for use
## in downstream cases like libafl_cc linking the runtime with:
## `-fsanitize=fuzzer-no-link -l:libafl_libfuzzer_runtime.a`
embed-runtime = []

## üêá
rabbit = []

## For testing and publishing purposes only: enforce that the runtime uses versions rather than paths
libafl-libfuzzer-use-version = []

[dependencies]
libfuzzer-sys = { version = "0.4.7", default-features = false }
document-features = { version = "0.2.10", optional = true }

[package.metadata.docs.rs]
features = ["document-features"]
all-features = true

rustdoc-args = ["--cfg", "docsrs"]


[lints.rust]
# Deny
warnings = { level = "deny", priority = -1 }

# Forbid
unexpected_cfgs = "forbid"

# Allow
incomplete_features = "allow"
# ambiguous_glob_reexports = "allow"


[lints.clippy]
# Deny
all = { level = "deny", priority = -1 }
pedantic = { level = "deny", priority = -1 }
cargo_common_metadata = "deny"

alloc_instead_of_core = "deny"
std_instead_of_alloc = "deny"
std_instead_of_core = "deny"

# Warn
cargo = { level = "warn", priority = -1 }

# Allow
negative_feature_names = "allow"       # TODO: turn into 'warn' when working
multiple_crate_versions = "allow"      # TODO: turn into `warn` when working
unreadable_literal = "allow"
type_repetition_in_bounds = "allow"
missing_errors_doc = "allow"
cast_possible_truncation = "allow"
used_underscore_binding = "allow"
ptr_as_ptr = "allow"
missing_panics_doc = "allow"
module_name_repetitions = "allow"
unsafe_derive_deserialize = "allow"
similar_names = "allow"
too_many_lines = "allow"
comparison_chain = "allow"             # This lint makes **ZERO** sense
unnecessary_debug_formatting = "allow" # :thumbsdown: :thumbsdown: :thumbsdown: :thumbsdown: :thumbsdown: :thumbsdown: 
struct_field_names = "allow"           # ????

[lints.rustdoc]
# Deny
broken_intra_doc_links = "deny"
